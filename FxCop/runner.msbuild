<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildCommunityTasksPath>.</MSBuildCommunityTasksPath>
  </PropertyGroup>
 

  <!-- Required Import to use MSBuild Community Tasks -->
  <Import Project=".\Contrib\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>


  <PropertyGroup>
    <ToolsPath>C:\Tools</ToolsPath>
    <ProjectName>PROJECT.TO.BE.INSERTED</ProjectName>
<ProjBuildPath>../../StaticCodeAnalysis/bin/Debug/StaticCodeAnalysis.dll</ProjBuildPath>

    <BuildPath Condition=" '$(BuildPath)'==''">.\Build</BuildPath>

    <ArtifactsPath Condition=" '$(ArtifactsPath)'==''">.\Artifacts</ArtifactsPath>
    <AnalysisOutputPath Condition="'$(AnalysisOutputPath)' == ''">$(ArtifactsPath)\Analysis</AnalysisOutputPath>

    <!-- Define Constants for FxCop -->
    <FxCopRoot Condition="'$(FxCopRoot)' == ''">$(MSBuildThisFileDirectory)\Contrib\Microsoft Fxcop 10.0</FxCopRoot>

    <!-- Define Constants for Conditional Compilation -->
    <DefineConstants Condition=" '$(DefineConstants)'==''">DEBUG;TRACE</DefineConstants>

  </PropertyGroup>

  <!-- Target for Preconditions -->
  <Target Name="Preconditions" >
    <MakeDir Condition="!Exists('$(ArtifactsPath)')"
             Directories="$(ArtifactsPath)"
             />

    <MakeDir Condition="!Exists('$(AnalysisOutputPath)')"
             Directories="$(AnalysisOutputPath)"
             />

  </Target>

  <!-- Define Constants for Building -->
  <ItemGroup>
    <ProjectToBuild Include=".\$(ProjectName).sln" />
	 <BinFiles Include=".\$(ProjectName)\bin\**\*.*"/>
    <!--<ProjectToBuild Include=".\$(ProjectName).sln" />-->

  </ItemGroup>
  <!-- Target for Building -->
  <Target Name="Rebuild"
          DependsOnTargets="Build"
          />

  <Target Name="Build" 
          DependsOnTargets="Preconditions" 
          >
   

  </Target>

  <Target Name="Analyze"
          DependsOnTargets="FxCopAnalysis;FxCopMonitoring" />
  
  <!-- Define Constants for FxCop -->
  <PropertyGroup>
    <FxCopCriticalErrors>0</FxCopCriticalErrors>
    <FxCopErrors>0</FxCopErrors>
    <FxCopCriticalWarnings>0</FxCopCriticalWarnings>
    <FxCopWarnings>0</FxCopWarnings>

    <FxCopMandatoryProject>$(BuildPath)\FxCop\Mandatory.FxCop</FxCopMandatoryProject>
    <FxCopMandatoryXmlOutput>$(AnalysisOutputPath)\Mandatory.FxCop.xml</FxCopMandatoryXmlOutput>
	<FxCopIgnore></FxCopIgnore>
  </PropertyGroup>

  <ItemGroup>   

    <FxCopAttribute Include="Item">
      <ProjectFile>$(FxCopMandatoryProject)</ProjectFile>
      <XmlOutput>$(FxCopMandatoryXmlOutput)</XmlOutput>
	<InputIgnore>$(FxCopIgnore)</InputIgnore>
    </FxCopAttribute>

  </ItemGroup>


<Target Name="AfterBuild" DependsOnTargets="Rebuild">
    <Copy SourceFiles="@(BinFiles)" 
          DestinationFolder=".\Output"/>
</Target>



  <Target Name="FxCopMonitoring"
          Condition="Exists('$(FxCopMandatoryProject)')"
          DependsOnTargets="FxCopAnalysis"
          >
    <Message Text="Processing FxCopXmlReport file '$(FxCopMandatoryXmlOutput)'" />

    <XmlRead ContinueOnError="True"
      XmlFileName="$(FxCopMandatoryXmlOutput)"
      XPath="string(count(//Issue[@Level='CriticalError']))">
      <Output TaskParameter="Value" PropertyName="FxCopCriticalErrors" />
    </XmlRead>

    <XmlRead ContinueOnError="True"
      XmlFileName="$(FxCopMandatoryXmlOutput)"
      XPath="string(count(//Issue[@Level='Error']))">
      <Output TaskParameter="Value" PropertyName="FxCopErrors" />
    </XmlRead>

    <XmlRead ContinueOnError="True"
      XmlFileName="$(FxCopMandatoryXmlOutput)"
      XPath="string(count(//Issue[@Level='CriticalWarning']))">
      <Output TaskParameter="Value" PropertyName="FxCopCriticalWarnings" />
    </XmlRead>

    <XmlRead ContinueOnError="True"
      XmlFileName="$(FxCopMandatoryXmlOutput)"
      XPath="string(count(//Issue[@Level='Warning']))">
      <Output TaskParameter="Value" PropertyName="FxCopWarnings" />
    </XmlRead>

    <Warning Condition="$(FxCopCriticalErrors) &gt; 0"
             Text="FxCop encountered $(FxCopCriticalErrors) Critical Error(s)" />
    <Warning Condition="$(FxCopErrors) &gt; 0"
             Text="FxCop encountered $(FxCopErrors) Error(s)" />
    <Warning Condition="$(FxCopCriticalWarnings) &gt; 0"
             Text="FxCop encountered $(FxCopCriticalWarnings) Critical Warning(s)" />
    <Warning Condition="$(FxCopWarnings) &gt; 0" 
             Text="FxCop encountered $(FxCopWarnings) Warning(s)" />

    <Error Condition="$(FxCopCriticalErrors) &gt; 0 OR $(FxCopErrors) &gt; 0 OR $(FxCopCriticalWarnings) &gt; 0 OR $(FxCopWarnings) &gt; 0"
           Text="FxCop found violations: Critical Errors=$(FxCopCriticalErrors), Errors=$(FxCopErrors), Critical Warnings=$(FxCopCriticalWarnings), Warnings=$(FxCopWarnings)" />

  </Target>

  <Target Name="FxCopAnalysis" 
          DependsOnTargets="Preconditions"
          >
    <Message Condition="Exists('%(FxCopAttribute.ProjectFile)')"
             Text="Processing FxCop project file '%(FxCopAttribute.ProjectFile)'" />

    <Message Condition="!Exists('%(FxCopAttribute.ProjectFile)')"
             Text="Cannot find FxCop project file '%(FxCopAttribute.ProjectFile)'" />

    <Exec Condition="Exists('%(FxCopAttribute.ProjectFile)')"
          Command="&quot;$(FxCopRoot)\FxCopCmd.exe&quot; /project:%(FxCopAttribute.ProjectFile) /file:$(ProjBuildPath)  /fo /out:%(FxCopAttribute.XmlOutput) "
          WorkingDirectory="." />

  </Target>

</Project>